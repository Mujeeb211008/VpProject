@page "/UpdateUserInfo"
@page "/UpdateUserInfo/{id}"
@layout NewLayout
@attribute [Authorize(Roles = "User")]
@using DataAccessLayer;
@inject NavigationManager nm

<PageTitle>Index</PageTitle>

<button @onclick="loadSpecific">Click to Load Your Current Data</button>

<div class="row mb-3">
	<div class="col-md-6">
		<div class="form-group">
			Enter only those fields that you want to update
		</div>
	</div>
</div>

<EditForm Model="modelUserInfo" OnSubmit="updateUser">
	<div class="row mb-3">
		<div class="col-md-6">
			<div class="form-group">
				<input type="text" placeholder="@modelUserInfo1.FirstName" @bind-value="modelUserInfo.FirstName" />
			</div>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-md-6">
			<div class="form-group">
				<input type="text" placeholder="@modelUserInfo1.LastName" @bind-value="modelUserInfo.LastName" />
			</div>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-md-6">
			<div class="form-group">
				<input type="text" placeholder="@modelUserInfo1.Phone" @bind-value="modelUserInfo.Phone" />
			</div>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-md-6">
			<div class="form-group">
				<input type="text" placeholder="@modelUserInfo1.Email" @bind-value="modelUserInfo.Email" />
			</div>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-md-6">
			<div class="form-group">
				<input type="text" placeholder="@modelUserInfo1.Password" @bind-value="modelUserInfo.Password" />
			</div>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-md-6">
			<div class="form-group">
				<input type="text" placeholder="@modelUserInfo1.Role" @bind-value="modelUserInfo.Role" />
			</div>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-md-12">
			<button type="submit" class="btn btn-primary">Save</button>
		</div>
	</div>
</EditForm>


@code {

	ModelUserInfo modelUserInfo { get; set; } = new ModelUserInfo();
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	ModelUserInfo modelUserInfo1 { get; set; } = new ModelUserInfo();


	[Parameter] public string id { get; set; }
	string UId { get; set; }
	// protected override async Task OnInitializedAsync()
	// {
	// 	var authsate = await authenticationState;
	// 	UId = authsate.User.FindFirst("UserId")?.Value.ToString();
	// 	modelUserInfo1 = await DalUserInfo.GetUserInfo();

	// }
	
	protected override async Task OnInitializedAsync() => await LoadUserData();

	private async Task LoadUserData()
	{
		var authState = await authenticationState;
		UId = authState.User.FindFirst("UserId")?.Value;
		
	}

	private void loadSpecific()
	{

		modelUserInfo1 = DalUserInfo.GetUserInfoSpecific(UId);

	}

	private void updateUser()
	{
		DalUserInfo.UpdateUserInfo(UId, modelUserInfo);
		nm.NavigateTo("");
	}
}
