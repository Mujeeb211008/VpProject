@layout LoginLayout
@page "/login"
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
<div class="container-fluid">
	<div class="row justify-content-center align-items-center vh-100">
		<div class="col-md-4">
			<!-- Adjusted width to col-md-4 -->
			<div class="card shadow">
				<div class="card-body p-5">
					<h2 class="text-center mb-4">MS Auctions</h2>

					<form>
						<div class="mb-3">
							<label for="inputEmail" class="form-label">Email address</label>
							<input type="email" class="form-control" id="inputEmail" @bind="model.Email" placeholder="name@example.com">
						</div>
						<div class="mb-3">
							<label for="inputPassword" class="form-label">Password</label>
							<input type="password" class="form-control" id="inputPassword" @bind="model.Password" placeholder="Password">
						</div>
						<div class="mb-3 form-check">
							<input type="checkbox" class="form-check-input" id="rememberMe">
							<label class="form-check-label" for="rememberMe">Remember me</label>
						</div>
						<button type="button" class="w-100 btn btn-primary" @onclick="Authenticate">Sign in</button>
					</form>

					<div class="text-center mt-3">
						<p class="text-muted">Don't have an account? <a href="/register">Sign up</a></p>
					</div>
					<div class="text-center mt-3">
						<p class="text-muted">
							<a href="/forgot-password">Forgot your password?</a>
						</p>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private class Model
	{
		public string? Email { get; set; }
		public string? Password { get; set; }
	}
	private Model model = new Model();
	ModelLayer.ModelUserInfo? modelUserAccount = new ModelLayer.ModelUserInfo();
	private async Task Authenticate()
	{
		modelUserAccount = userAccountService.GetByUserName(model.Email, model.Password);
		if (modelUserAccount.UserId == null || modelUserAccount.FirstName == null)
		{
			await js.InvokeVoidAsync("alert", "Invalid email or password");
			return;
		}
		else
		{
			var customAuthStateProvier = (CustomAuthenticationStateProvider)authStateProvider;
			await customAuthStateProvier.UpdateAuthenticatinoState(new UserSession
				{
					UserId = modelUserAccount.UserId,
					FirstName = modelUserAccount.FirstName,
					Role = modelUserAccount.Role
				});
			navManager.NavigateTo("/", true);
		}
	}
}